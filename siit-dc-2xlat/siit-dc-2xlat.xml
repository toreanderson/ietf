<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-ietf-v6ops-siit-dc-2xlat-00"
     ipr="trust200902">

  <front>
    <title abbrev="SIIT-DC-2XLAT">SIIT-DC: Dual Translation Mode</title>
    <author fullname="Tore Anderson" initials="T." surname="Anderson">
      <organization>Redpill Linpro</organization>
      <address>
        <postal>
          <street>Vitaminveien 1A</street>
          <!-- Embedding the postal code directly in the <city> element
               instead of using <code> in necessary to get correct Norwegian
               syntax. For more information, see:
               http://trac.tools.ietf.org/tools/xml2rfc/trac/ticket/280 -->
          <city>0485 Oslo</city>
          <country>Norway</country>
        </postal>
        <phone>+47 959 31 212</phone>
        <email>tore@redpill-linpro.com</email>
        <uri>http://www.redpill-linpro.com</uri>
      </address>
    </author>
    <date year="2015" />
    <area>General</area>
    <workgroup>IPv6 Operations</workgroup>
    <abstract>
      <t>
      This document describes an extension of the Stateless IP/ICMP
      Translation for IPv6 Data Centre Environments architecture (SIIT-DC),
      which allows applications, protocols, or nodes that are incompatible
      with IPv6, SIIT-DC and/or Network Address Translation in general to
      operate correctly in an SIIT-DC environment. This is accomplished by
      introducing a new component called an Edge Translator, which reverses
      the translations made by an SIIT-DC Gateway. The application or device
      is thus provided with seemingly native IPv4 connectivity.
      </t>
      <t>
      The reader is expected to be familiar with the SIIT-DC architecture
      described in I-D.ietf-v6ops-siit-dc.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>
      <xref target="I-D.ietf-v6ops-siit-dc">SIIT-DC</xref> describes an
      architecture where IPv4-only users can access IPv6-only services through
      a stateless translator called an SIIT-DC Gateway. This approach has
      certain limitations, however. In particular, the following cases will
      work poorly or not at all:
      </t>
      <t>
      <list style="symbols">
        <t>Application protocols that do not support NAT (i.e., the lack of
        end-to-end transparency of IP addresses).</t>
        <t>Devices which cannot connect to IPv6 networks at all, or which can
        only connect such networks if they also provide IPv4 connectivity
        (i.e., dual-stacked networks).</t>
        <t>Application software which makes use of legacy IPv4-only APIs, or
        otherwise makes assumptions that IPv4 connectivity is available.</t>
      </list>
      </t>
      <t>
      By extending the SIIT-DC architecture with a new component called an
      Edge Translator (ET), all of the above can be made to work correctly in
      an otherwise IPv6-only network environment using SIIT-DC.
      </t>
      <t>
      The purpose of the Edge Translator is to reverse the IPv4-to-IPv6 packet
      translations previously done by the SIIT-DC Gateway for traffic arriving
      from IPv4 clients and forward this as "native" IPv4 to the application
      software or device. In the reverse direction, IPv4 packets transmitted
      by the application software or device is intercepted by the Edge
      Translator, which will translate them to IPv6 before they are forwarded
      to the SIIT-DC Gateway, which in turn will reverse the translations and
      forward them to the IPv4 End User. In short, the device or application
      software is provided with "virtual" IPv4 Internet connectivity that
      retains end-to-end transparency for the IPv4 addresses.
      </t>
    </section>
    <section anchor="terminology" title="Terminology">
      <t>
      This document makes use of the following terms:
      </t>
      <t>
      <list style="hanging">
       <t hangText="Edge Translator (ET)"><vspace/>A device or logical
       function that provides "native" IPv4 connectivity to IPv4-only devices
       or application software. It is very similar in function to an SIIT-DC
       Gateway, but is typically located close to the IPv4-only component(s)
       it is supporting rather than on the network border.</t>
       <t hangText="IPv4 Service Address"><vspace/>A public IPv4 address with
       which IPv4-only clients will communicate. This communication will be
       translated to IPv6 by the SIIT-DC Gateway and back to IPv4 again by the
       Edge Translator.</t>
       <t hangText="SIIT-DC Gateway"><vspace/>A device or a logical function
       that translates between IPv4 and IPv6 in accordance with <xref
       target="I-D.ietf-v6ops-siit-dc"/>.</t>
       <t hangText="Static Address Mapping"><vspace/>A bi-directional mapping
       between an IPv4 Service Address and an IPv6 Service Address configured
       in the SIIT-DC Gateway. When translating between IPv4 and IPv6, the
       SIIT-DC Gateway changes the address fields in the translated packet's
       IP header according to any matching Static Address Mapping.</t>
       <t hangText="Translation Prefix"><vspace/>An IPv6 prefix into which the
       entire IPv4 address space is mapped. This prefix is routed to the
       SIIT-DC Gateway's IPv6 interface. It is either an Network-Specific
       Prefix or a Well-Known Prefix as specified in <xref target="RFC6052"/>.
       When translating between IPv4 and IPv6, the SIIT-DC Gateway will
       prepend or strip the Translation Prefix from the address fields in the
       translated packet's IP header, unless a Static Address Mapping exists
       for the IP address in question.</t>
       <t hangText="XLAT"><vspace/>Used in figures to indicate where the <xref
       target="RFC6145">Stateless IP/ICMP Translation</xref> algorithm is used
       to translate IPv4 packets to IPv6 and vice versa.  </t>
      </list>
      </t>
      <t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref target="RFC2119"/>.
      </t>
    </section>
    <section anchor="et_descr"
             title="Edge Translator Description">
      <t>
      An Edge Translator (ET) is at its core an implementation of the <xref
      target="RFC6145">Stateless IP/ICMP Translation algorithm</xref>, with
      the Static Address Mapping extension described in Section 5.2 of <xref
      target="I-D.ietf-v6ops-siit-dc"/>. It provides virtual IPv4 connectivity
      for application software or devices which require this to operate
      correctly in an SIIT-DC environment.
      </t>
      <t>
      Inbound IPv4 packets destined for an IPv4 Service Address is first
      translated to IPv6 by an SIIT-DC Gateway. The resulting IPv6 packets are
      subsequently forwarded to the ET handling the IPv6 Service Address they
      are addressed to. The ET then translates them back to IPv4 before
      forwarding them to the IPv4 application software or device.  In the
      other direction, the exact same translations happen, only in reverse.
      This process provides end-to-end transparency of IPv4 addresses.
      </t>
      <t>
      An ET may handle an arbitrary number of IPv4 Service Addresses. All the
      Static Address Mappings configured in the SIIT-DC Gateway(s) that
      involve the IPv4 Service Addresses handled by an ET MUST be duplicated
      in that ET's configuration.
      </t>
      <t>
      An ET may be implemented in two distinct ways; as a software-based
      service residing inside an otherwise IPv6-only host, or as a
      network-based service that provides an isolated IPv4 network segment to
      which devices which require IPv4 can connect. In both cases native IPv6
      connectivity may be provided simultaneously with the virtual IPv4
      connectivity. Thus, dual-stack connectivity is facilitated in case the
      device or application software support it.
      </t>
      <t>
      The choice between a host- or network-based ET is made on a per-service
      or -device basis. An arbitrary number of each type of ET may co-exist in
      an SIIT-DC architecture.
      </t>
      <t>
      This section describes the different approaches and discusses which
      approach fits best for the various use cases. 
      </t>
      <section anchor="et_hostbased" title="Host-Based Edge Translator">
        <t>
        <figure anchor="fig_hostbased_et_brief" align="center">
          <preamble>Overview of a Host-based Edge Translator</preamble>
          <artwork align="center"><![CDATA[
[IPv4 Internet]   [IPv6 Internet]
   |                         |
+--|--<SIIT-DC GW>--+        |
| [XLAT]            |        |
+--|----------------+        |
   |                         |
 [IPv6-only data centre network]
   |
+--|--<IPv6-only server>---------------+
|  |                 +----------------+|
|  +--[ET/XLAT]--AF_INET  Dual-stack  ||
|  |                 |    Application ||
|  \------------AF_INET6  Software    ||
|                    +----------------+|
+--------------------------------------+
          ]]></artwork>
        </figure>
        </t>
        <t>
        A host-based Edge Translator is typically implemented as a logical
        software function that runs inside the operating system of a host or
        server. It provides software applications running on the same host
        with IPv4 connectivity. The IPv4 Service Address it handles is
        considered local, allowing application software running on the same
        host to use traditional IPv4-only API calls, e.g., to create AF_INET
        sockets that listen for and accept incoming connections to its IPv4
        Service Address. An ET could accomplish this by creating a virtual
        network adapter to which it assigns the IPv4 Service Address and
        points a default IPv4 route.
        </t>
        <t>
        As shown in <xref target="fig_hostbased_et_brief"/>, if the
        application software supports dual-stack operation, IPv6 clients will
        be able to communicate with it directly using native IPv6. Neither the
        SIIT-DC Gateway nor the ET will intercept this communication. Support
        for IPv6 in the application software is however not a requirement; the
        application software may opt not to establish any IPv6 sockets.
        Foregoing IPv6 in this manner will simply preclude connectivity to the
        service from IPv6-only clients; connectivity to the service from IPv4
        clients (through the SIIT-DC Gateway) will work in the exact same
        manner in both cases.
        </t>
        <t>
        The ET requires a dedicated IPv6 Service Address for each IPv4 Service
        Address it has configured. The IPv6 network must forward traffic to
        these IPv6 Service Addresses to the host, whose operating system must
        in turn forward them to the ET. This document does not explore the
        multitude of ways this could be accomplished, however considering that
        the IPv6 protocol is designed for having multiple addresses assigned
        to a single node, one particularly straight-forward way would be to
        assign the ET's IPv6 Service Addresses as secondary IPv6 addresses on
        the host itself so that it the upstream router learns of their
        location using the <xref target="RFC4861">IPv6 Neighbor Discovery
        Protocol</xref>.
        </t>
      </section>
      <section anchor="et_netbased" title="Network-Based Edge Translator">
        <t>
        <figure anchor="fig_netbased_et_basic" align="center">
          <preamble>Overview of a Basic Network-based Edge
          Translator</preamble>
          <artwork align="center"><![CDATA[
[IPv4 Internet]   [IPv6 Internet]
   |                         |
+--|--<SIIT-DC GW>--+        |
| [XLAT]            |        |
+--|----------------+        |
   |                         |
 [IPv6-only data centre network]
   |
+--|--<ET>--+
| [XLAT]    |
+--|--------+
   |
 [Isolated IPv4-only network segment]
   |
+--|--<IPv4-only server>----+
|  |      +----------------+|
|  \--AF_INET  IPv4-only   ||
|         |    Application ||
|         |    Software    ||
|         +----------------+|
+---------------------------+
          ]]></artwork>
        </figure>
        </t>
        <t>
        A network-based Edge Translator performs the exact same as a
        host-based ET does, only that instead of assigning the IPv4 Service
        Addresses to an internal-only virtual network adapter, traffic
        destined for them are forwarded onto a network segment to which hosts
        that require IPv4 connectivity connect to. The ET also functions as
        the default IPv4 router for the hosts on this network segment.
        </t>
        <t>
        Each host on the IPv4 network segment must acquire and assign an IPv4
        Service Address to a local network interface. This document does not
        attempt to explore all the various methods by which this can be
        accomplished. Some examples of such methods are given in <xref
        target="examples_netbased_connectivity" />.
        </t>
        <t>
        The basic ET illustrated in <xref target="fig_netbased_et_basic"/>
        establishes an IPv4-only network segment behind itself. This is fine
        if the devices it provides IPv4 access have no support for IPv6
        whatsoever; however if they are dual-stack capable, it is would not be
        ideal to take away their IPv6 connectivity. While it is recommended to
        use a host-based ET in this case, appropriate implementations of a
        host-based ET might not be available for every device. If the
        application protocol does not work correctly in a NAT environment,
        standard SIIT-DC cannot be used either. Thus, a network-based ET is
        the only solution.
        </t>
        <t>
        The operator could avoid breaking the hosts' IPv4 connectivity by
        connecting the ET's IPv4 and IPv6 interfaces to the same network
        segment, or by using a single dual-stacked interface instead. The
        latter alternative is shown in <xref
        target="fig_netbased_et_onastick"/>. This could be thought of as an
        "ET on a stick". IPv6 traffic between the network and the hosts will
        bypass the ET entirely. IPv4 traffic from the hosts will be routed
        directly to the ET (because it's their default IPv4 router), and
        translated to IPv6 before its being transmitted to the upstream
        default IPv6 router. The ET could attract inbound traffic to its IPv6
        Service Addresses by responding to the upstream router's <xref
        target="RFC4861">IPv6 Neighbor Discovery</xref> messages for them.
        </t>
        <t>
        <figure anchor="fig_netbased_et_onastick" align="center">
          <preamble>A Network-based Edge Translator "on a stick"</preamble>
          <artwork align="center"><![CDATA[
[IPv4 Internet]   [IPv6 Internet]
   |                         |
+--|--<SIIT-DC GW>--+        |
| [XLAT]            |        |
+--|----------------+        |
   |                         |
 [IPv6-only data centre network]
   |
   |  +--<ET>------+
   |  |  ____      |
   |  | /    \     |
   +====   [XLAT]  |
   |  | \____/     |
   |  |            |
   |  +------------+
   |
 [Dual-stack network segment]
   |
+--|--<Dual-stack server>----+
|  |       +----------------+|
|  +---AF_INET  Dual-stack  ||
|  |       |    Application ||
|  \--AF_INET6  Software    ||
|          +----------------+|
+----------------------------+
          ]]></artwork>
        </figure>
        </t>
        <t>
        Yet another variation would be to implement the ET so that it
        transparently passes IPv6 traffic between its downstream and upstream
        network ports unmodified, e.g., using Layer-2 bridging. Packets sent
        to its own IPv6 Service Addresses from the upstream network are
        intercepted (e.g, by responding to <xref target="RFC4861">IPv6
        Neighbor Discovery</xref> messages for them) and routed through the
        translation function, and forwarded out its downstream interface. The
        downstream network segment is thus becomes dual-stacked. This model is
        shown in <xref target="fig_transparent_et"/>.
        </t>
        <t>
        <figure anchor="fig_transparent_et" align="center">
          <preamble>A Transparent Network-based Edge Translator</preamble>
          <artwork align="center"><![CDATA[
[IPv4 Internet]   [IPv6 Internet]
   |                         |
+--|--<SIIT-DC GW>--+        |
| [XLAT]            |        |
+--|----------------+        |
   |                         |
 [IPv6-only data centre network]
   |
+--|--<Edge Translator>--+
|  |\_____________       |
|  |              \      |
| [Bridged IPv6] [XLAT]  |
|  | _____________/      |
|  |/                    |
+--|---------------------+
   |
 [Dual-stack network segment]
   |
+--|--<Dual-stack server>----+
|  |       +----------------+|
|  +---AF_INET  Dual-stack  ||
|  |       |    Application ||
|  \--AF_INET6  Software    ||
|          +----------------+|
+----------------------------+
          ]]></artwork>
        </figure>
        </t>
      </section>
    </section>
    <section title="Detailed Topology Example">
      <t>
      The following figure shows how an application (that is presumably
      incompatible with standard SIIT-DC) is being made available to the IPv4
      Internet on the IPv4 address 192.0.2.4. The application will be able to
      know that this is its local address and thus be able to provide correct
      references to it in application payload.
      </t>
      <t>
      The figure also shows how the same application is available over IPv6 on
      its IPv6 Service Address 2001:db8:12:34::3. This is included in order to
      illustrate how native IPv6 connectivity is not impacted by the Edge
      Translator, and also to illustrate how the address assigned to the ET
      (2001:db8:12:34::4) is separate from the primary IPv6 address of the
      server. It is however important to note that the application in question
      does not have to be dual-stack capable at all.  IPv4-only applications
      would also be able to operate behind an ET in the exact same manner.
      </t>
      <t>
      Note that the figure below could be considered a more detailed view of
      Customer A's FTP server from the example topology figure in Appendix A
      of <xref target="I-D.ietf-v6ops-siit-dc"/>. Both figures intentionally
      use the exact same example IP addresses and prefixes.
      </t>
      <t>
      <figure anchor="fig_architecture" align="center">
        <preamble>SIIT-DC Host Architecture with Edge Translation</preamble>
        <artwork align="center"><![CDATA[
  +-------------------+         +----------------+
  | IPv6-capable user |         | IPv4-only user |
  | ================= |         | ============== |
  |                   |         |                |
  +-<2001:db8::ab:cd>-+         +-<203.0.113.50>-+
      |                                  |
   (the IPv6 internet)         (the IPv4 Internet)
      |                                  |
      |        +------------------<192.0.2.0/24>-+
      |        |                                 |
      |        |         SIIT-DC Gateway         |
      |        |         ===============         |
      |        |                                 |
      |        |       Translation Prefix:       |
      |        |         2001:db8:46::/96        |
      |        |                                 |
      |        |     Static Address Mapping:     |
      |        | 192.0.2.4 <=> 2001:db8:12:34::4 |
      |        |                                 |
      |        +--------------<2001:db8:46::/96>-+
      |                               |
     (the IPv6-only data centre network)
      |                               |
+--<2001:db8:12:34::3>-------<2001:db8:12:34::4>---+
|     |                               |            |
|     |          IPv6-only server     |            |
|     |          ================     |            |
|     |                               |            |
|     |        +-------------<2001:db8:12:34::4>-+ |
|     |        |                                 | |
|     |        |         Edge Translator         | |
|     |        |         ===============         | |
|     |        |                                 | |
|     |        |       Translation Prefix:       | |
|     |        |         2001:db8:46::/96        | |
|     |        |                                 | |
|     |        |     Static Address Mapping:     | |
|     |        | 192.0.2.4 <=> 2001:db8:12:34::4 | |
|     |        |                                 | |
|     |        +---------------------<192.0.2.4>-+ |
|     |                                   |        |
| +-[2001:db8:12:34::3]--------------[192.0.2.4]-+ |
| |      AF_INET6                      AF_INET   | |
| |                                              | |
| |           Dual-stacked application           | |
| |                                              | |
| +----------------------------------------------+ |
+--------------------------------------------------+
        ]]></artwork>
      </figure>
      </t>
    </section>
    <section title="Deployment Considerations">
      <section anchor="ipv6_pmtu" title="IPv6 Path MTU">
        <t>
        The IPv6 Path MTU between the Edge Translator and the SIIT-DC Gateway
        will typically be larger than the default value defined in Section 4
        of <xref target="RFC6145"/> (1280), as it will typically contained
        within a single administrative domain. Therefore, it is recommended
        that the IPv6 Path MTU configured in the ET is raised accordingly. It
        is RECOMMENDED that the ET and the SIIT-DC Gateway use identical
        configured IPv6 Path MTU values.
        </t>
      </section>
      <section anchor="ipv4_mtu" title="IPv4 MTU">
        <t>
        In order to avoid IPv6 fragmentation, an Edge Translator should ensure
        that the IPv4 MTU used by applications or hosts is equal to the
        configured IPv6 Path MTU - 20, so that an maximum-sized IPv4 packet
        can fit in an unfragmented IPv6 packet.  This ensures that the
        application may do its part in avoiding IP-level fragmentation from
        occurring, e.g., by segmenting/fragmenting outbound packets at the
        application layer, and advertising the maximum size its peer may use
        for inbound packets (e.g., through the use of the TCP MSS option).
        </t>
        <t>
        A host-based ET could accomplish this by configuring this MTU value on
        the virtual network adapter, while a network-based ET could do so by
        advertising the MTU to its downstream hosts using the <xref
        target="RFC2132">DHCPv4 Interface MTU Option</xref>.
        </t>
      </section>
      <section anchor="frag_id" title="IPv4 Identification Header">
        <t>
        If the generation of IPv6 Atomic Fragments is disabled, the value of
        the IPv4 Identification header will be lost during the translation.
        Conversely, enabling the generation of IPv6 Atomic Fragments will
        ensure that the IPv4 Identification Header will carried end-to-end.
        Note that for this to work bi-directionally, IPv6 Atomic Fragment
        generation must be enabled on both the SIIT-DC Gateway(s) and on the
        Edge Translator.
        </t>
        <t>
        Note that apart from certain diagnostic tools, there are few (if any)
        application protocols that make use of the IPv4 Identification header.
        Therefore, the loss of the IPv4 Identification value will therefore
        generally not cause any problems.
        </t>
        <t>
        IPv6 Atomic Fragments and their impact on the IPv4 Identification
        header is further discussed in Section 4.8.2 of <xref
        target="I-D.ietf-v6ops-siit-dc"/>.
        </t>
      </section>
    </section>
    <section anchor="intra_dc_v4" title="Intra-DC IPv4 Communication">
      <t>
      While SIIT-DC is primarily intended to facilitate communication between
      IPv4-only nodes on the Internet and services hosted in an IPv6-only
      network, it is also possible to facilitate communication between an
      IPv4-only service or application running behind an Edge Translator and
      another service/application made available over IPv4 through SIIT-DC.
      This other service/application may be a IPv6-only service, or it may
      also be an IPv4-only service running behind another ET.
      </t>
      <t>
      Facilitating such communication requires that another Static Address
      Mapping is configured in the ET (one for each service it wants to
      communicate to). If there are two ETs involved, both of them must be
      configured in the same fashion for bi-directional communication to work.
      The following two subsections contain examples that demonstrate how this
      may be set up.
      </t>
      <t>
      Note that for the intra-DC communication described in this section, the
      SIIT-DC Gateway is not involved at all. Therefore there is no
      requirement that the Static Address Mappings in question are also
      configured on the SIIT-DC Gateway. It is also possible to use private
      <xref target="RFC1918"/> IPv4 addresses, in order to reduce the need for
      publicly routable IPv4 addresses. However, if the IPv4-only
      application(s) are also to be made available to the IPv4 Internet
      through an SIIT-DC Gateway, it is highly recommended that the Static
      Address Mappings configured in the ET match those configured in the
      SIIT-DC Gateway. Otherwise one end up in the situation where a service
      is reached using different IPv4 addresses depending on whether one
      connects to it from the IPv4 Internet or from another IPv4-only
      application residing in the same data centre. While it may still work,
      the overall architecture gets significantly more complex.
      </t>
      <t>
      Finally, if both services/applications support IPv6, it is highly
      recommended that IPv6 is used for all internal communications. The
      approach described in this section should only be used if one or both of
      the services or applications only supports IPv4, making native IPv6
      communication impossible.
      </t>
      <section title="Between IPv4-Only and IPv6-Only Services">
        <t>
        This section demonstrates how an IPv4-only service/application "A"
        running behind an ET can communicate with an IPv6-only service "B". 
        </t>
        <t>
        <figure anchor="fig_ipv4only_to_ipv6only" align="center">
          <preamble>Intra-DC IPv4-only to IPv6-only Overview</preamble>
          <artwork align="center"><![CDATA[
   /--------------------------------------\
   |    IPv6-only data centre network     |
   \-+----------------------------------+-/
     |                                  |
     |                                  |
+--<2001:db8:6::>----------------+ +--<2001:db8:7::>----------------+
|    |                           | |    |                           |
|    |  IPv6-only server A       | |    |  IPv6-only server B       |
|    |  ==================       | |    |  ==================       |
|    |                           | |    |                           |
|+-<2001:db8:6::>---------------+| |+-[2001:db8:7::]---------------+|
||                              || ||    AF_INET6                  ||
||      Edge Translator A       || ||                              ||
||      =================       || ||   IPv6-only application B    ||
||                              || |+------------------------------+|
||   Static Address Mappings:   || +--------------------------------+
||  192.0.2.6 <=> 2001:db8:6::  ||
||  192.0.2.7 <=> 2001:db8:7::  ||
||                              ||
|+-<192.0.2.6>------------------+|
|       |                        |
|+-[192.0.2.6]------------------+|
||   AF_INET                    ||
||                              ||
||   IPv4-only application A    ||
|+------------------------------+|
+--------------------------------+
          ]]></artwork>
        </figure>
        </t>
        <t>
        In this example, the IPv4-only application on server "A" is listening
        on the IPv4 address 192.0.2.6, which is made available to the IPv6
        network on the IPv6 address 2001:db8:6:: (by the ET).  The IPv6-only
        application on server "B" is only listening on the IPv6 address
        2001:db8:7::, and has no knowledge of IPv4.
        </t>
        <t>
        In order to facilitate communication between the two application,
        another Static Address Mapping must be configured in the ET on server
        "A". This provides an IPv4 address (192.0.2.7) that the IPv4-only
        application can communicate with, which represents the IPv6 address
        used by application "B" (2001:db8:7::).
        </t>
        <t>
        The following figure shows the packet translations step by step, for a
        packet sent by the IPv4-only application "A" to the IPv6-only
        application "B". For traffic in the opposite direction, you may read
        the figure from the bottom up and swap the Src/Dst addresses.
        </t>
        <t>
        <figure anchor="fig_ipv4only_to_ipv6only_pktflow" align="center">
          <preamble>Intra-DC IPv4-only to IPv6-only Packet Flow</preamble>
          <artwork align="center"><![CDATA[
(IPv4-only application A)  --\
  |                          |
 Src 192.0.2.6               |
 Dst 192.0.2.7               | Packet forwarding/translations
  |                          | happening inside server A
  V                          |
[SIIT-DC ET A]               |
  |                        --/
  |                        --\
 Src 2001:db8:6::            | Actual IPv6 packets routed
 Dst 2001:db8:7::            | through the IPv6 network
  |                        --/
  V
(IPv6-only application B)
          ]]></artwork>
        </figure>
        </t>
      </section>
      <section title="Between Two IPv4-Only Services">
        <t>
        This section demonstrates how an IPv4-only service/application "A"
        running behind an ET can communicate with an IPv4-only
        service/application "B" running behind another ET.
        </t>
        <t>
        <figure anchor="fig_ipv4only_to_ipv4only" align="center">
          <preamble>Intra-DC IPv4-only to IPv6-only Overview</preamble>
          <artwork align="center"><![CDATA[
   /--------------------------------------\
   |    IPv6-only data centre network     |
   \-+----------------------------------+-/
     |                                  |
     |                                  |
+--<2001:db8:8::>----------------+ +--<2001:db8:9::>----------------+
|    |                           | |    |                           |
|    |  IPv6-only server A       | |    |  IPv6-only server B       |
|    |  ==================       | |    |  ==================       |
|    |                           | |    |                           |
|+-<2001:db8:8::>---------------+| |+-<2001:db8:9::>---------------+|
||                              || ||                              ||
||      Edge Translator A       || ||      Edge Translator B       ||
||      =================       || ||      =================       ||
||                              || ||                              ||
||   Static Address Mappings:   || ||   Static Address Mappings:   ||
||  192.0.2.8 <=> 2001:db8:8::  || ||  192.0.2.8 <=> 2001:db8:8::  ||
||  192.0.2.9 <=> 2001:db8:9::  || ||  192.0.2.9 <=> 2001:db8:9::  ||
||                              || ||                              ||
|+-<192.0.2.8>------------------+| |+-<192.0.2.9>------------------+|
|       |                        | |       |                        |
|+-[192.0.2.8]------------------+| |+-[192.0.2.9]------------------+|
||   AF_INET                    || ||   AF_INET                    ||
||                              || ||                              ||
||   IPv4-only application A    || ||   IPv4-only application B    ||
|+------------------------------+| |+------------------------------+|
+--------------------------------+ +--------------------------------+
          ]]></artwork>
        </figure>
        </t>
        <t>
        In this example, the IPv4-only application on server "A" is listening
        on the IPv4 address 192.0.2.8, which is made available to the IPv6
        network on the IPv6 address 2001:db8:8:: (by the ET).  In the same
        fashion, the IPv4-only application on server "B" is listening on the
        IPv4 address 192.0.2.9 and is made available by its ET on the IPv6
        address 2001:db8:9::.
        </t>
        <t>
        In order to facilitate communication between the two application, a
        second Static Address Mapping must be configured in the ET on both
        servers. This provides each application with an IPv4 address that
        represents the other application. Thus bi-directional communication
        between the two applications can commence.
        </t>
        <t>
        The following figure shows the packet translations step by step, for a
        packet sent by the IPv4-only application "A" to the IPv4-only
        application "B". For traffic in the opposite direction, you may read
        the figure from the bottom up and swap the Src/Dst addresses.
        </t>
        <t>
        <figure anchor="fig_ipv4only_to_ipv4only_pktflow" align="center">
          <preamble>Intra-DC IPv4-only to IPv4-only Packet Flow</preamble>
          <artwork align="center"><![CDATA[
(IPv4-only application A) --\
  |                         |
 Src 192.0.2.8              |
 Dst 192.0.2.9              | Packet forwarding/translations
  |                         | happening inside server A
  V                         |
[SIIT-DC ET A]              |
  |                       --/
  |                       --\
 Src 2001:db8:8::           | Actual IPv6 packets routed
 Dst 2001:db8:9::           | through the IPv6 network
  |                       --/
  V                       --\
[SIIT-DC ET B]              |
  |                        |
 Src 192.0.2.8             | Packet forwarding/translations
 Dst 192.0.2.9             | happening inside server B
  |                        |
  V                        |
(IPv4-only application B) --/
          ]]></artwork>
        </figure>
        </t>
      </section>
    </section>
    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
      The author would like to especially thank the authors of <xref
      target="RFC6877">464XLAT</xref>: Masataka Mawatari, Masanobu Kawashima,
      and Cameron Byrne. The architecture described by this document is merely
      an adaptation of their work to a data centre environment, and could not
      have happened without them.
      </t>
      <t>
      The author would like also to thank the following individuals for their
      contributions, suggestions, corrections, and criticisms: Fred Baker,
      Tobias Brox, Ray Hunter, Shucheng LIU (Will), Andrew Yourtchenko.
      </t>
    </section>
    <section anchor="IANA" title="IANA Considerations">
      <t>
      This draft makes no request of the IANA. The RFC Editor may remove this
      section prior to publication.
      </t>
    </section>
    <section anchor="Security" title="Security Considerations">
      <t>
      This section discusses security considerations specific to the use of an
      Edge Translator. See the Security Considerations section in <xref
      target="I-D.ietf-v6ops-siit-dc"/> for additional security considerations
      applicable to the SIIT-DC architecture in general.
      </t>
      <section anchor="sec_loops" title="Address Spoofing">
        <t>
        If the ET receives an IPv4 packet from the application from a
        different source address than the one it has a Static Address Mapping
        for, the both the source and destination addresses will be rewritten
        according to <xref target="RFC6052"/>. After undergoing the reverse
        translation in the SIIT-DC Gateway, the resulting IPv4 packet routed
        to the IPv4 network will have a spoofed IPv4 source address.  The ET
        should therefore ensure that ingress filtering (cf. <xref
        target="RFC2827">BCP38</xref>) is used on the ET's IPv4 interface, so
        that such packets are immediately discarded.
        </t>
        <t>
        If the ET receives an IPv6 packet with both the source and destination
        address equal to the one it has a Static Address Mapping for, the
        resulting packet would appear to the application as locally generated,
        as both the source address and the destination address will be the
        same address as the one configured on the virtual IPv4 interface. This
        could trick the application into thinking this packet came from a
        trusted source, and give elevated privileges accordingly. To prevent
        this, the ET should discard any received IPv6 packets that have a
        source address that is equal either to either the IPv4 (after
        undergoing <xref target="RFC6052"/> translation) or the IPv6 address
        in the Static Address Mapping.
        </t>
      </section>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.I-D.ietf-v6ops-siit-dc"?>
    </references>
    <references title="Informative References">
      <?rfc include="reference.RFC.1918"?>
      <?rfc include="reference.RFC.2132"?>
      <?rfc include="reference.RFC.2827"?>
      <?rfc include="reference.RFC.4861"?>
      <?rfc include="reference.RFC.6052"?>
      <?rfc include="reference.RFC.6145"?>
      <?rfc include="reference.RFC.6877"?>
    </references>

    <section anchor="examples_netbased_connectivity"
      title="Examples: Network-Based IPv4 connectivity">
      <section anchor="et_netbased_subnet_v4sa"
        title="Subnet with IPv4 Service Addresses">
        <t>
          One relatively straight-forward possibility for providing IPv4
          connectivity from the ET to the IPv4 devices
          would be to ensure the IPv4 Service Address(es) can be enclosed in an
          IPv4 prefix. The ET will then claim one address in this prefix for
          itself (used as the IPv4 default router address), and could assign the
          IPv4 Service Address(es) to the host(s) using DHCPv4. For example, if
          the IPv4 Service Addresses are 192.0.2.26 and 192.0.2.27, the ET would
          configure the address 192.0.2.25/29 on its IPv4-facing interface and
          would add the two IPv4 Service Addresses to its DHCPv4 pool.
        </t>
        <t>
          One disadvantage of this method is that IPv4 communication between the
          IPv4 hosts and other services made available through SIIT-DC using the
          method described in <xref target="intra_dc_v4"/> becomes impossible,
          if those other services are assigned IPv4 Service Addresses that also
          are covered by the same IPv4 prefix (e.g., 192.0.2.28). This is
          because the IPv4 nodes will mistakenly believe they have an on-link
          route to the entire prefix, and attempt to resolve the addresses using
          ARP (instead of forwarding them to the ET for translation to IPv6).
          This problem could however be overcome by avoiding assigning IPv4
          Service Addresses which overlaps with an IPv4 prefix handled by an ET
          (at the expense of wasting some potential IPv4 Service Addresses), or
          by ensuring that they are only assigned to services which do not need
          to communicate with the IPv4 host(s) behind the ET.
        </t>
      </section>
      
      <section anchor="et_netbased_subnet_unrouted"
        title="Subnet with unrouted IPv4 addresses">
        <t>
          Another way to avoid the problem is to use a private unrouted IPv4
          network that does not encompass the IPv4 Service Addresses as the
          IPv4, and instead assign the IPv4 Service Addresses as secondary
          addresses on the servers. The ET must then route each IPv4 Service
          Address to its respective server using the server's private on-link
          IPv4 address as the next-hop. This approach would ensure there are no
          overlaps, but on the other hand it would preclude the use of DHCPv4
          for assigning the IPv4 Service Addresses, as well as create a need to
          ensure that the IPv4 application software is selecting the IPv4
          Service Address (as opposed to its private on-link IPv4 address) as
          its source address when initiating outbound connections.
        </t>
      </section>
    </section>
  </back>

</rfc>
<!-- vim: syntax=xml tw=78 ai fo=2 et:
-->
